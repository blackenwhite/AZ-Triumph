class Node{
    int cnt;
    Node[] ch;
    int lvl;

    public Node(){
        cnt=0;
        ch = new Node[2];
        ch[0] = null;
        ch[1] = null;
    }
}

public class Bit_Trie {
    public Node root;
    private final int LN = 31;
    public Bit_Trie() {
        root = new Node();
    }

    public void add(int n){
        // test
//        System.out.println("Adding "+ n + " to bitTrie");
        Node cur = root;
        for(int i=LN-1;i>=0;--i){
            cur.cnt++;
            cur.lvl = (i+1);
            int x = (n&(1<<i))>0?1:0;
            if(cur.ch[x]==null){
                cur.ch[x] = new Node();
            }
            cur=cur.ch[x];
        }
        cur.cnt++;
        cur.lvl = 0;
    }

    private int getCount(Node cur, int bit){
        if(cur.ch[bit]==null) return 0;
        else return cur.ch[bit].cnt;
    }

    public int query(int n, int k){
        int ans = 0;
        Node cur = root;
        for(int i=LN-1;i>=0;--i){
            int bit = (n&(1<<i))>0?1:0;
            int k1 = (k&(1<<i))>0?1:0;
            if(cur==null) break;
            if(bit==0){
                if(k1==0){
                    ans+=getCount(cur,1);
                    cur = cur.ch[0];
                }else{
                    cur=cur.ch[1];
                }
            }else{
                if(k1==0){
                    ans+=getCount(cur,0);
                    cur=cur.ch[1];
                }else{
                    cur=cur.ch[0];
                }
            }
        }
        if(cur!=null) ans+=cur.cnt;
        return ans;
    }
}
package com.nabajyoti;

// program with user defined FastReader (most efficient way to read input from user)
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLOutput;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Main {
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader()
        {
            br = new BufferedReader(
                    new InputStreamReader(System.in));
        }

        String next()
        {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                }
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() { return Integer.parseInt(next()); }

        long nextLong() { return Long.parseLong(next()); }

        double nextDouble()
        {
            return Double.parseDouble(next());
        }

        String nextLine()
        {
            String str = "";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    public static void main(String[] args)
    {
        FastReader s = new FastReader();

        /*int n = s.nextInt();
        int[] array = new int[n];
        for(int i=0;i<n;i++)
        {
            array[i]= s.nextInt();
        }
        for(int i=0;i<n;i++)
        {
            if(array[i]/4>0)
            {
                array[i]=array[i]/4;
            }
            else
            {
                array[i]=-1;
            }
        }
        for(int i=0;i<n;i++)
        {
            System.out.print(array[i]+" ");
        }
        System.out.print("\n");*/
        int t = s.nextInt();
        while(t>0){
            t--;
            int n,k;
            Bit_Trie bitTrie = new Bit_Trie();
            n = s.nextInt();
            k = s.nextInt();
            int[] arr = new int[n];
            for(int i=0;i<n;i++){
                arr[i] = s.nextInt();
            }

            int pre = 0;
            bitTrie.add(pre);
            int ans = 0;
            for(int i=0;i<n;i++){
                pre = pre ^ arr[i];
                int temp = bitTrie.query(pre,k);
//                System.out.println(" temp for "+i + " = "+temp);
                bitTrie.add(pre);
                ans+=temp;
            }
//            ans += bitTrie.query(pre,k);
            int ans1 = (n*(n+1))/2;
            ans1-=ans;
            System.out.println(ans1);
        }

    }



}
